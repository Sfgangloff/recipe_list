{"ast":null,"code":"var _jsxFileName = \"/home/silvere/Desktop/Apps/recipelist/src/editable.js\";\nimport { relativeTimeRounding } from 'moment';\nimport React, { Component } from 'react';\nimport { doc, addDoc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    this.updateComponentValue = async e => {\n      const newValue = this.refs.theTextInput.value;\n      const recipe = await getDoc(this.state.recipe);\n      var comments = recipe.data().comments;\n      if (e.key === \"Enter\" && newValue !== \"\") {\n        this.setState({\n          isInEditMode: false,\n          value: newValue\n        });\n        comments[this.state.rank] = this.state.value;\n        await updateDoc(this.state.recipe, {\n          comments: comments\n        });\n      }\n      if (e.key === \"Enter\" && newValue === \"\") {\n        this.setState({\n          isInEditMode: false,\n          value: \"\"\n        });\n        comments.splice(this.state.rank, 1);\n        comments.push(\"###################################################\");\n        await updateDoc(this.state.recipe, {\n          comments: comments\n        });\n      }\n    };\n    if (this.props.value !== \"\") {\n      this.state = {\n        value: this.props.value,\n        isInEditMode: false,\n        recipe: this.props.recipe,\n        rank: this.props.commentRank\n      };\n    } else {\n      this.state = {\n        value: \"###################################################\",\n        isInEditMode: false,\n        recipe: this.props.recipe,\n        rank: this.props.commentRank\n      };\n    }\n    this.changeEditMode = this.changeEditMode.bind(this);\n    this.renderEditView = this.renderEditView.bind(this);\n    this.renderDefaultView = this.renderDefaultView.bind(this);\n    this.updateComponentValue = this.updateComponentValue.bind(this);\n  }\n  changeEditMode() {\n    this.setState({\n      isInEditMode: !this.state.isInEditMode\n    });\n  }\n  renderEditView() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        defaultValue: this.state.value,\n        ref: \"theTextInput\",\n        onKeyPress: this.updateComponentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 10\n    }, this);\n  }\n  renderDefaultView() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onDoubleClick: this.changeEditMode,\n      children: this.state.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }, this);\n  }\n  render() {\n    return this.state.isInEditMode ? this.renderEditView() : this.renderDefaultView();\n  }\n}\nexport default Comment;","map":{"version":3,"names":["relativeTimeRounding","React","Component","doc","addDoc","getDoc","updateDoc","Comment","constructor","props","updateComponentValue","e","newValue","refs","theTextInput","value","recipe","state","comments","data","key","setState","isInEditMode","rank","splice","push","commentRank","changeEditMode","bind","renderEditView","renderDefaultView","render"],"sources":["/home/silvere/Desktop/Apps/recipelist/src/editable.js"],"sourcesContent":["import { relativeTimeRounding } from 'moment';\nimport React, { Component } from 'react';\nimport {doc, addDoc, getDoc, updateDoc} from \"firebase/firestore\"\n\n\nclass Comment extends Component {\n\n  constructor(props) {\n    super(props)\n\n    if (this.props.value!==\"\") {\n      this.state = {\n        value:this.props.value, \n        isInEditMode:false,\n        recipe:this.props.recipe,\n        rank:this.props.commentRank\n      }\n    } else {\n      this.state = {\n        value:\"###################################################\", \n        isInEditMode:false,\n        recipe:this.props.recipe,\n        rank:this.props.commentRank\n      }\n    }\n\n    this.changeEditMode = this.changeEditMode.bind(this)\n    this.renderEditView = this.renderEditView.bind(this)\n    this.renderDefaultView = this.renderDefaultView.bind(this)\n    this.updateComponentValue = this.updateComponentValue.bind(this)\n    \n  \n}\n\nchangeEditMode() {\n  this.setState(\n    {\n      isInEditMode:!this.state.isInEditMode\n    }\n  )\n}\n\nupdateComponentValue = async e => {\n  const newValue = this.refs.theTextInput.value\n  const recipe = await getDoc(this.state.recipe);\n  var comments = recipe.data().comments\n\n  if (e.key === \"Enter\" && newValue !==\"\") {\n    this.setState({\n    isInEditMode:false,\n    value: newValue})\n    comments[this.state.rank] = this.state.value\n    await updateDoc(this.state.recipe,{comments:comments});\n    }\n\n  if (e.key === \"Enter\" && newValue ===\"\") {\n    this.setState({\n    isInEditMode:false,\n    value: \"\"})\n    comments.splice(this.state.rank,1)\n    comments.push(\"###################################################\")\n    await updateDoc(this.state.recipe,{comments:comments})\n}\n}\n\nrenderEditView() {\n\n  return <div>\n    <input type=\"text\" \n           defaultValue={this.state.value}\n           ref=\"theTextInput\" onKeyPress={this.updateComponentValue}/>\n  </div>\n}\n\nrenderDefaultView() {\n  return <div onDoubleClick = {this.changeEditMode}> \n  {this.state.value}\n</div>\n}\n\n  render() {\n    return this.state.isInEditMode ? \n     this.renderEditView() : this.renderDefaultView()\n    \n  }\n}\n\nexport default Comment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}